module ALU8(
    input [7:0] a,
    input [7:0] b,
    input [3:0] operation,
    output reg [7:0] result,
    output carry_out
);
    wire [8:0] extended_result;
    assign extended_result = {1'b0, a} + {1'b0, b};
    assign carry_out = extended_result[8];

    always @(*) begin
        case (operation)
            4'b0000: result = a + b;                    // Addition
            4'b0001: result = a - b;                    // Subtraction
            4'b0010: result = a * b;                    // Multiplication
            4'b0011: result = a / b;                    // Division
            4'b0100: result = a << 1;                   // Shift left
            4'b0101: result = a >> 1;                   // Shift right
            4'b0110: result = {a[6:0], a[7]};           // Rotate left
            4'b0111: result = {a[0], a[7:1]};           // Rotate right
            4'b1000: result = a & b;                    // AND
            4'b1001: result = a | b;                    // OR
            4'b1010: result = a ^ b;                    // XOR
            4'b1011: result = ~(a | b);                 // NOR
            4'b1100: result = ~(a & b);                 // NAND
            4'b1101: result = ~(a ^ b);                 // XNOR
            4'b1110: result = (a > b) ? 8'd1 : 8'd0;    // Greater than
            4'b1111: result = (a == b) ? 8'd1 : 8'd0;   // Equal to
            default: result = 8'b00000000;              // Default case
        endcase
    end
endmodule
